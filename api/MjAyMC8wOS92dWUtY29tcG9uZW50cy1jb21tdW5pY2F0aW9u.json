{"title":"Vue组件间通信","date":"2020-09-19T21:34:00.000Z","date_formatted":{"ll":"2020年9月19日","L":"2020/09/19","MM-DD":"09-19"},"link":"2020/09/vue-components-communication","tags":["Vue"],"categories":["Vue"],"updated":"2020-09-20T08:57:15.113Z","content":"<p>Vue组件间通信的两种常见情况：</p>\n<ul>\n<li>父子组件间通信\n<ul>\n<li>父传子</li>\n<li>子传父</li>\n</ul>\n</li>\n<li>非父子组件间通信</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"父子组件间通信：\">父子组件间通信：<a title=\"#父子组件间通信：\" href=\"#父子组件间通信：\"></a></h3>\n<p>父子组件通信很简单，父组件会通过 <code>props</code> 向下传数据给子组件，当子组件有事情要告诉父组件时会通过 <code>$emit</code> 事件告诉父组件。</p>\n<p>这里拿element-ui中的对话框dialog举例，定义两个组件，<code>Index.vue</code>和<code>Dialog.vue</code>。Index中有一个按钮，点击按钮，将<code>dialog.isVisible=true</code>带到子组件中，打开对话框；在子组件中点击关闭按钮，再关闭对话框。关闭时，需要在子组件调用父组件中的方法，将父组件中的属性<code>dialog.isVisible</code>置为<code>false</code>。</p>\n<p><code>Dialog.vue</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;el-dialog</span><br><span class=\"line\">        :title&#x3D;&quot;title&quot;</span><br><span class=\"line\">        :visible.sync&#x3D;&quot;isVisible&quot;</span><br><span class=\"line\">        width&#x3D;&quot;30%&quot;&gt;</span><br><span class=\"line\">      &lt;span&gt;message:&#123;&#123; msg &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">      &lt;span slot&#x3D;&quot;footer&quot; class&#x3D;&quot;dialog-footer&quot;&gt;</span><br><span class=\"line\">    &lt;el-button @click&#x3D;&quot;close&quot; type&#x3D;&quot;primary&quot;&gt;关 闭&lt;&#x2F;el-button&gt;</span><br><span class=\"line\">  &lt;&#x2F;span&gt;</span><br><span class=\"line\">    &lt;&#x2F;el-dialog&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &quot;dialog&quot;,</span><br><span class=\"line\">  &#x2F;&#x2F; props:定义组件的属性，父组件通过props中定义的属性将值传过来。也就是说父组件只能向子组件中props定义的属性传值</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    visible: &#123;</span><br><span class=\"line\">      type: Boolean,</span><br><span class=\"line\">      default: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    title: &#123;</span><br><span class=\"line\">      type: String,</span><br><span class=\"line\">      default: &#39;&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#x2F;&#x2F; 当组件属性发生改变时返回最新的值</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    isVisible() &#123;</span><br><span class=\"line\">      return this.visible</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      msg: &#39;&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    close() &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 子组件调用父组件方法，定义close事件，当dialog关闭时，调用父组件定义的方法&lt;Dialog @close&#x3D;&quot;xxx&quot;&#x2F;&gt;，调用父组件中的xxx方法</span><br><span class=\"line\">      this.$emit(&#39;close&#39;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#x2F;&#x2F; 该方法在父组件中通过$refs.dialog.initMsg()的形式调用</span><br><span class=\"line\">    initMsg()&#123;</span><br><span class=\"line\">      this.msg &#x3D; &#39;父组件调用子组件方法&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<p><code>Index.vue</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;button @click&#x3D;&quot;dialogOpen&quot;&gt;打开对话框&lt;&#x2F;button&gt;</span><br><span class=\"line\">    &lt;!--</span><br><span class=\"line\">\t\t\tvisible：是子组件props中定义的属性，父组件通过通过这种形式将值带到子组件中</span><br><span class=\"line\">\t\t\ttitle：也是同理</span><br><span class=\"line\">\t\t\t@close&#x3D;&quot;dialogClose&quot;：@close是子组件Dialog自定义的事件。当Dialog关闭时，子组件中执行this.$emit(&#39;close&#39;)，调用父组件中的dialogClose()方法</span><br><span class=\"line\">\t\t\tref：官方的解释是用来给元素或子组件注册一个引用，该引用会绑定到父组件的$refs对象上。如果在普通DOM元素上使用，引用指向的是DOM元素；如果用在子组件上，引用就是指向子组件的实例。</span><br><span class=\"line\">\t\t--&gt;</span><br><span class=\"line\">    &lt;Dialog :visible&#x3D;&quot;dialog.isVisible&quot; :title&#x3D;&quot;dialog.title&quot; @close&#x3D;&quot;dialogClose&quot; ref&#x3D;&quot;dialog&quot;&gt;&lt;&#x2F;Dialog&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import Dialog from &#39;.&#x2F;components&#x2F;Dialog&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &quot;index&quot;,</span><br><span class=\"line\">  components: &#123;Dialog&#125;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      dialog: &#123;</span><br><span class=\"line\">        isVisible: false,</span><br><span class=\"line\">        title: &#39;&#39;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    dialogOpen() &#123;</span><br><span class=\"line\">      this.dialog.title &#x3D; &#39;父传子&#39;</span><br><span class=\"line\">      &#x2F;&#x2F; 父组件调用子组件方法，通过ref属性指向子组件实例，调用子组件中的方法</span><br><span class=\"line\">      this.$refs.dialog.initMsg()</span><br><span class=\"line\">      this.dialog.isVisible &#x3D; true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    dialogClose() &#123;</span><br><span class=\"line\">      this.dialog.isVisible &#x3D; false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"非父子组件间通信：\">非父子组件间通信：<a title=\"#非父子组件间通信：\" href=\"#非父子组件间通信：\"></a></h3>\n<p><img src=\"https://images.shiguangping.com/imgs/20200920164317.jpg\" alt=\"img\" class=\"φcx\"></p>\n<p>如果我们不需要类似Vuex这样的库来处理组件之间的数据通信，就可以考虑Vue中的 <code>事件总线</code> ，即 <code>EventBus</code>来通信。</p>\n<p><strong>EventBus的简介</strong></p>\n<p><code>EventBus</code> 又称为事件总线。在Vue中可以使用 <code>EventBus</code> 来作为沟通桥梁的概念，就像是所有组件共用相同的事件中心，可以向该中心注册发送事件或接收事件，所以组件都可以上下平行地通知其他组件，但也就是太方便所以若使用不慎，就会造成难以维护的“灾难”，因此才需要更完善的Vuex作为状态管理中心，将通知的概念上升到共享状态层次。</p>\n<p><strong>如何使用EventBus</strong></p>\n<p><strong>一、初始化</strong><br>\n首先需要创建事件总线并将其导出，以便其它模块可以使用或者监听它。我们可以通过两种方式来处理。先来看第一种，新创建一个 .js 文件，比如 <code>event-bus.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// event-bus.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> EventBus = <span class=\"keyword\">new</span> Vue()</span><br></pre></td></tr></table></figure>\n<p>实质上<code>EventBus</code>是一个不具备 <code>DOM</code> 的组件，它具有的仅仅只是它实例方法而已，因此它非常的轻便。</p>\n<p>另外一种方式，可以直接在项目中的 <code>main.js</code> 初始化 <code>EventBus</code> :</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\">Vue.prototype.$EventBus = <span class=\"keyword\">new</span> Vue()</span><br></pre></td></tr></table></figure>\n<p>注意，这种方式初始化的<code>EventBus</code>是一个<code>全局的事件总线</code>。</p>\n<p>现在我们已经创建了 <code>EventBus</code> ，接下来你需要做到的就是在你的组件中加载它，并且调用同一个方法，就如你在父子组件中互相传递消息一样。</p>\n<p><strong>二、发送事件</strong></p>\n<p><img src=\"https://images.shiguangping.com/imgs/20200920164616.jpg\" alt=\"img\" class=\"φcx\"></p>\n<p>假设你有两个Vue页面需要通信： A 和 B ，A页面 在按钮上面绑定了点击事件，发送一则消息，想通知 B页面。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- A.vue --&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;button @click&#x3D;&quot;sendMsg()&quot;&gt;-&lt;&#x2F;button&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt; </span><br><span class=\"line\">import &#123; EventBus &#125; from &quot;..&#x2F;event-bus.js&quot;;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    sendMsg() &#123;</span><br><span class=\"line\">      EventBus.$emit(&quot;aMsg&quot;, &#39;来自A页面的消息&#39;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;; </span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<p>接下来，我们需要在 B页面 中接收这则消息。</p>\n<p><strong>三、接收事件</strong></p>\n<p><img src=\"https://images.shiguangping.com/imgs/20200920164707.jpg\" alt=\"img\" class=\"φcx\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- IncrementCount.vue --&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt; </span><br><span class=\"line\">import &#123; EventBus &#125; from &quot;..&#x2F;event-bus.js&quot;;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data()&#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      msg: &#39;&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    EventBus.$on(&quot;aMsg&quot;, (msg) &#x3D;&gt; &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; A发送来的消息</span><br><span class=\"line\">      this.msg &#x3D; msg;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<p>同理我们也可以在 B页面 向 A页面 发送消息。这里主要用到的两个方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 发送消息</span></span><br><span class=\"line\">EventBus.$emit(channel: string, callback(payload1,…))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听接收消息</span></span><br><span class=\"line\">EventBus.$on(channel: string, callback(payload1,…))</span><br></pre></td></tr></table></figure>\n<p>前面提到过，如果使用不善，<code>EventBus</code>会是一种灾难，到底是什么样的<code>“灾难”</code>了？大家都知道vue是单页应用，如果你在某一个页面刷新了之后，与之相关的<code>EventBus</code>会被移除，这样就导致业务走不下去。还要就是如果业务有反复操作的页面，<code>EventBus</code>在监听的时候就会触发很多次，也是一个非常大的隐患。这时候我们就需要好好处理<code>EventBus</code>在项目中的关系。通常会用到，在vue页面销毁时，同时移除<code>EventBus</code>事件监听。</p>\n<p><strong>移除事件监听者</strong></p>\n<p><img src=\"https://images.shiguangping.com/imgs/20200920164847.jpg\" alt=\"img\" class=\"φcx\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; eventBus &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./event-bus.js&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">EventBus.$off(<span class=\"string\">&#x27;aMsg&#x27;</span>, &#123;&#125;)</span><br></pre></td></tr></table></figure>\n<p>你也可以使用 <code>EventBus.$off('aMsg')</code> 来移除应用内所有对此某个事件的监听。或者直接调用 <code>EventBus.$off()</code> 来移除所有事件频道，不需要添加任何参数 。</p>\n<p>上面就是 <code>EventBus</code> 的使用方法，是不是很简单。上面的示例中我们也看到了，每次使用 <code>EventBus</code> 时都需要在各组件中引入 <code>event-bus.js</code> 。事实上，我们还可以通过别的方式，让事情变得简单一些。那就是创建一个全局的 <code>EventBus</code> 。接下来的示例向大家演示如何在Vue项目中创建一个全局的 <code>EventBus</code> 。</p>\n<p><strong>全局EventBus</strong></p>\n<p>它的工作原理是发布/订阅方法，通常称为 <code>Pub/Sub</code> 。</p>\n<p><strong>创建全局EventBus</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> EventBus = <span class=\"keyword\">new</span> Vue();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperties(Vue.prototype, &#123;</span><br><span class=\"line\">  $bus: &#123;</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> EventBus</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>在这个特定的总线中使用两个方法<code>$on</code>和<code>$emit</code>。一个用于创建发出的事件，它就是<code>$emit</code>；另一个用于订阅<code>$on</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> EventBus = <span class=\"keyword\">new</span> Vue();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$bus.$emit(<span class=\"string\">&#x27;nameOfEvent&#x27;</span>, &#123; ... pass some event data ...&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$bus.$on(<span class=\"string\">&#x27;nameOfEvent&#x27;</span>,<span class=\"function\">(<span class=\"params\">$event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>然后我们可以在某个Vue页面使用<code>this.$bus.$emit(&quot;sendMsg&quot;, '我是web秀');</code>，另一个Vue页面使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.$bus.$on(<span class=\"string\">&#x27;updateMessage&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value); <span class=\"comment\">// 我是web秀</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>同时也可以使用<code>this.$bus.$off('sendMsg')</code>来移除事件监听。</p>\n<p><strong>总结</strong></p>\n<p>本文主要通过简单的实例学习了Vue中有关于 <code>EventBus</code> 相关的知识点。主要涉及了 <code>EventBus</code> 如何实例化，又是如何通过 <code>$emit</code> 发送频道信号，又是如何通过 <code>$on</code> 来接收频道信号。最后简单介绍了如何创建全局的 <code>EventBus</code> 。从实例中我们可以了解到， <code>EventBus</code> 可以较好的实现兄弟组件之间的数据通讯。</p>\n","prev":{"title":"Docker部署nacos单机版","link":"2020/09/docker-nacos-standalone"},"next":{"title":"使用Spring Cloud Feign上传文件","link":"2020/09/feign-upload"},"plink":"https://www.shiguangping.com/2020/09/vue-components-communication/","toc":[{"id":"父子组件间通信：","title":"父子组件间通信：","index":"1"},{"id":"非父子组件间通信：","title":"非父子组件间通信：","index":"2"}]}