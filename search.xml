<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>hexo g构建静态文件无法生成index.html等文件</title>
      <link href="/2018/hexo%20g%E6%9E%84%E5%BB%BA%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E6%97%A0%E6%B3%95%E7%94%9F%E6%88%90index.html%E7%AD%89%E6%96%87%E4%BB%B6/"/>
      <url>/2018/hexo%20g%E6%9E%84%E5%BB%BA%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E6%97%A0%E6%B3%95%E7%94%9F%E6%88%90index.html%E7%AD%89%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h1 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h1><p>安装好<code>nodejs</code>,<code>git</code>,<code>HEXO</code>之后,在GitHub上重新克隆hexo源文件到本地,然后通过<code>hexo c</code>,<code>hexo g</code>命令后,<code>public</code>文件夹内没有<code>index.html</code>等文件.<br><a id="more"></a></p><h1 id="检查npm插件"><a href="#检查npm插件" class="headerlink" title="检查npm插件"></a>检查npm插件</h1><p><pre><code><br>npm ls –depth 0<br></code></pre><br>通过命令查看缺少的插件,终端会提示很多<code>npm ERR!</code></p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p><pre><code><br>npm install hexo-generator-archive –save<br></code></pre><br>安装后重新<code>hexo c</code>,<code>hexo g</code>即可.</p><h1 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h1><p>我今天通过上述方法解决了没有<code>index.html</code>的问题,但是生成的<code>index.html</code>是空的.后来我发现是<code>themes</code>里面的主题,只有个主题文件夹,把主题的文件夹打开之后,发现里面为空.之后重新下主题文件放进去就好了.</p>]]></content>
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>因王自如和罗永浩对战所引发的感想</title>
      <link href="/2018/%E5%9B%A0%E7%8E%8B%E8%87%AA%E5%A6%82%E5%92%8C%E7%BD%97%E6%B0%B8%E6%B5%A9%E5%AF%B9%E6%88%98%E6%89%80%E5%BC%95%E5%8F%91%E7%9A%84%E6%84%9F%E6%83%B3/"/>
      <url>/2018/%E5%9B%A0%E7%8E%8B%E8%87%AA%E5%A6%82%E5%92%8C%E7%BD%97%E6%B0%B8%E6%B5%A9%E5%AF%B9%E6%88%98%E6%89%80%E5%BC%95%E5%8F%91%E7%9A%84%E6%84%9F%E6%83%B3/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&ensp;&ensp;&ensp;&ensp;写这篇文章的起因是因为我在YouTube上看到了14年《互联网史上第一次约架 罗永浩对话王自如》的视频，我也把视频呢分享到下面。由于这个视频引发我对目前国内现状的一些吐槽吧算是。这种情绪已经积蓄很久，今天看了这个视频而“爆发”出来。<br>&ensp;&ensp;&ensp;&ensp;本来我是在YouTube视频的下方评论区写的，但是越写越多，索性就写成一篇“文章”吧，记录下来，留给自己以后看。<br><a id="more"></a></p><h1 id="《互联网史上第一次约架-罗永浩对话王自如》分享自YouTube"><a href="#《互联网史上第一次约架-罗永浩对话王自如》分享自YouTube" class="headerlink" title="《互联网史上第一次约架 罗永浩对话王自如》分享自YouTube"></a>《互联网史上第一次约架 罗永浩对话王自如》分享自YouTube</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/NHthqBWfBwI" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="我对王自如评测T1这件事儿的看法"><a href="#我对王自如评测T1这件事儿的看法" class="headerlink" title="我对王自如评测T1这件事儿的看法"></a>我对王自如评测T1这件事儿的看法</h2><p>&ensp;&ensp;&ensp;&ensp;从王自如对T1手机评测视频的开头，就已经看出来他是有意在黑锤子。<br>&ensp;&ensp;&ensp;&ensp;首先声明我不是锤粉，我也没有买过锤子手机。<br>&ensp;&ensp;&ensp;&ensp;王自如在评测视频开头有这么一句话：“就假设T1的品质是合格的”。单单从这句话，就说明他是在“黑”，并且视频中还用到“拆穿”,“看透”等词语，我想这些都是贬义词吧，如果王自如不是有意的，不是在黑锤子，那他真应该报个培训班好好学习该怎么说话。视频里罗永浩也提到了，王自如在做的手机评测视频还是有一定影响力的，有不少的粉丝。我想说王自如，你在视频开头就利用一大堆贬义性的词语对粉丝和视频观众产生误导，你这根本就谈不到“公开，独立，第三方”吧。<br>&ensp;&ensp;&ensp;&ensp;现在已经是2018年，王自如和罗永浩对战应该是三年前了，王自如当时在视频中说，说ZEALER（王自如做的手机评测机构）的评测流程正在申请专利，等专利申请完就会公开。但是现在都过去三四年了，王自如的专利申请到哪去了呢？我看现在赚钱太好赚了，有这几个手机大厂拿钱让王自如打广告，王自如何必还要费尽心思去做真正的“公开、独立、第三方”的评测呢？</p><h2 id="由罗永浩对话王自如事件所爆发的感想"><a href="#由罗永浩对话王自如事件所爆发的感想" class="headerlink" title="由罗永浩对话王自如事件所爆发的感想"></a>由罗永浩对话王自如事件所爆发的感想</h2><h3 id="社会现状"><a href="#社会现状" class="headerlink" title="社会现状"></a>社会现状</h3><p>&ensp;&ensp;&ensp;&ensp;其实王自如只是他代表的这类人中的之一，现在中国的社会，就是这样的人太多了，并且还有人会拿钱养着这些人。反而真心想做好一些事儿的人却很难出人头地，得到大佬的帮助。<br>&ensp;&ensp;&ensp;&ensp;我国现在是一个将近14E人口的超级大国，从建国到现在已经发展了几十年，为什么现在很多人才都去了美国，去了国外，而在国内剩下的大部分人，钱倒是没少赚，却始终拿不出实质性的成果。就是因为腐败，因为中国很多人没有信仰，中国的教育（教育不单单指书本上的语数英等理论知识）所致。<br>&ensp;&ensp;&ensp;&ensp;之前和我大哥聊天的时候我说，说我国有中科院，有各种研究所，有一大堆的博士，教授等等，为啥我现在生活当中用到的东西没有他们研究的？我哥跟我说，说有，可能你不知道。可能我真的是不知道，我也不知道现在的博士啊，教授啊，研究所啊，每天都在研究哪些“高科技”项目，可能每天都在为了应付个论文申请个国家经费吧，当然也有一些真心为了社会而挣扎的人。为啥美国的很多东西都能进入我们的生活呢？现在的低头族都在用手机，看新闻，刷微博，发朋友圈，打游戏，智能手机系统中，苹果和安卓占据了手机市场的绝大部分份额，为什么这些影响全世界的东西没有中国两个字呢？中国不是没有人才，而是人才都流失到了国外，不要说他们不爱国，而是中国的这片水已经浑浊了，不适合生存了。他们是为了更好的去创造，而不是被一些利益熏洗的“人渣”所污染的。并且很多中国人有一种心理，“妒才”，妒忌人才。他们怕别人的能力超过自己，如果他们比自己能力强，就要去打压他们。这类人从来都不会去想着要努力超过比自己能力强的人，他们认为打压也是一种“能力”吧。<br>&ensp;&ensp;&ensp;&ensp;其实社会的反馈很真实，你给它一个好的作用力，它就会反馈给你一个好的结果，反之，则是恶性循环。去年天安门广场举行阅兵时，我看电视时的心情是激动的，我想我们的国家终于强大了，再也不会像过去被侵略时那样手无寸铁，现在的中国站起来了。我是第一次为自己是中国人而感到骄傲。其实，我是希望社会能恢复到健康的状态，国外好的技术、好的思想，我们应该多学习，多引荐，为己所用，而不是拿回来就变味了。包括微软，谷歌，苹果这类的公司，为啥他们能有创造力，而我们单单只有制造力。中国缺乏这样的公司，手握核心技术的公司。由于中国的某些科技公司的技术薄弱以及管理层的腐败，导致了被美国掐着脖子，最后反而得给美国人钱求得和解，中国有句老话，叫“吃人家的嘴短”，我想这句话不应该只用在自己身上吧。<br>&ensp;&ensp;&ensp;&ensp;其实像我这种貌似是在说外国好的人，是经常被一些所谓的“爱国人士”喷的，说我们是崇洋媚外。但我想你的所谓的爱国也只不过是在网上喷一喷吧，真有喷别人的时间，不如反思反思自己，如果我们每个人都能学会反思，都能有一点儿的所谓“人”心的话，中国走向强大的日子应该会更近一些。其实，当我们冷静的时候，我们要想一想，为什么有那么多的中国人喜欢去国外购物，喜欢外国货，为什么“宜家商场”这么火，难道都是因为这些人人傻钱多，这些人不爱国吗？我想应该不是吧！为什么有钱人不把孩子放到国内，而是送到外国，让他们接受国外的教育？这些都是值得深思的，中国有哪些品牌、企业是让我们中国人感到骄傲的？当然，也是有有前瞻性的企业的，例如<code>华为</code>。我认为<code>靠技术吃饭的公司手里怎么能没有技术呢？</code>。其实我们自己都知道中国的很多产品质量不行，很多食品不健康。这些种种我们知道的问题，不积极解决的问题，都会在未来砸我们自己的脚。<code>未来不一定是武力的较量，更多的，可能是技术的较量。</code>  </p><h3 id="谈价值观"><a href="#谈价值观" class="headerlink" title="谈价值观"></a>谈价值观</h3><p>&ensp;&ensp;&ensp;&ensp;说这么多其实是改变不了什么的，社会已然如此，不是一个人两个人能改变和解决的。说到社会为什么发展成了这样，我上面说了，可能是教育，可能是人的信仰，这些导致了人的素质，人的价值观。这些都是从小养成的，且受身边环境影响的，且非一个人两个人能改变的。之前我跟我朋友聊天时说到，我说你看我之前在X城坐地铁，他们都自觉排队，你看现在在Y市，他们都不排队，Y市的人素质真差。我的好朋友跟我说，说这没办法，他们都不排队，你想排队也没法排。这就是说你身边的人，绝大部分都是“坏人”，所以你也只能跟着做“坏人”，因为你做了“好人”，也极有可能被认为是“坏人”，就是这个道理。<br>&ensp;&ensp;&ensp;&ensp;日本的街道上很少有垃圾桶，但是日本的大街上几乎没有垃圾，他们产生的垃圾可能会放在身上一整天，直到下班回家再扔到垃圾桶。在中国，垃圾桶成了摆设，有人会把垃圾扔到垃圾桶，有的人会随处扔，不能说随处扔垃圾的人就是素质低，因为他们看见别人也是随处扔垃圾，没有意识到自己的行为是“低素质”的。这就是价值观，从小养成且受环境影响的。<br>&ensp;&ensp;&ensp;&ensp;再拿日本举例，日本家庭的生活垃圾都是分类回收的，且每周每天回收的种类都不同，时间段是固定的，每周产生的生活垃圾一定要按时扔到垃圾回收处，没有按时扔的话，只能等到下一次再扔，这是日本形成的垃圾回收体系。在国内，街道上的垃圾桶有分类，一般分为可“可回收”和“不可回收”这两种，但是我们在扔垃圾的时候是不看分类的，认为只要扔到垃圾桶里就可以了，我想这也没错，因为根本没有人要求我们分类扔垃圾。我现在回忆上学的时候，老师或者课本上也没有要求我们要分类扔垃圾，政府也没有一个具体的体制来制约我们做这些，所以我们认为把垃圾扔到垃圾桶里就可以了。其实这种想法没什么不对的，国情就是如此。有的人想要分类扔垃圾，但是其他多数人不按分类扔垃圾，那分类扔垃圾的人的行为就可以说没有太大的意义，且就算我们多数人都分类扔垃圾，但是回收垃圾的人不分类回收，那也是没有意义的，这就需要国家政府来制定一套完整的体系，公民分类扔垃圾-回收人员分类回收-回收站分类处理，哪些是可回收可利用的，哪些是可焚毁的，哪些是不可用还不能焚毁的等等，各个环节都能把控好，那意义应该是很大的。<br>&ensp;&ensp;&ensp;&ensp;一个健康的、健全的社会体制是多方面共同完成的，所谓”天时、地利、人和”缺一不可。都说孩子是祖国未来的花朵，现在应该在小孩的教育上着手，因为人的价值观多数是在上学的时期形成的。在学习课本知识的同时，也要从价值观上入手，培养人的良性价值观，提升国民素质，国民整体素质提高了，就会产生好的体制，从而促进良性的规则产生，久而久之才能形成良性循环。如果现在畏畏缩缩，不敢大胆施行一种改革，那么什么时候才能有改变呢？<br>&ensp;&ensp;&ensp;&ensp;写了这么多，其实是无意义的，一个人是改变不了什么的。但我还是想写出来，把现在的心情记录下来。随着科技时代的进步，未来迟早都会像美国的科幻电影里一样，等再过几十年，等我退休的那一天，真想看看这个世界能发展成什么样子，满怀期待地看着。</p><h3 id="对一些人的期望"><a href="#对一些人的期望" class="headerlink" title="对一些人的期望"></a>对一些人的期望</h3><p>&ensp;&ensp;&ensp;&ensp;最后呢，我想首先对一些网络喷子说（因为网上的”爱国“喷子实在太多，群众的力量是很大的），爱国不是互喷，也不是反对崇洋媚外，而是在学习国外先进技术的同时造福中国，真心希望中国能好，能强大，这才应该是所谓的爱国之心吧；对追逐利益的商人我想说，在你已经取得财富的同时，希望能拿出”九牛一毛“和一点精力，真心去为人类做点儿什么吧，不要一味地吸收财富，也要学会创造；对知识分子我想说，学习知识不全是为了赚钱获取财富，也应该是为了证明自己的学识真真正正拿出成果吧。中国在核心技术这块儿始终是个软肋，不要说中国起步晚，国外起步早，这只是给自己找的一种借口，不要拿中国的现在和国外的以前相比，国外是把想象变成了现实，而现在不同的是，我们只需要把别人刻画好东西变成现实而已。一个貌似普通的圆珠笔珠也是近几年才能自主生产的，一个快被淘汰的机械硬盘到现在我国也不能自主生产，我们给自己的时间太多了。<br>&ensp;&ensp;&ensp;&ensp;好了，想说的话永远也说不完，我也是想到哪说到哪，不会再说了。我从来不认为自己是一个有正义感的人，因为我也跟上面我所描述的一类人一样，都生活在这样的环境里。没有一个人能影响时代的进步和发展，就连牛顿、爱因斯坦、霍金等名人也只不过是宇宙、是时间里微不足道的存在而已。<code>--时间依然会前行，不会因为谁而改变。</code><br><em>写于2018年6月15日，凌晨3点钟。</em></p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>在<code>前言</code>部分，我说”写这篇文章的起因“这句话，我对我自己写的东西自称文章，其实我是很不好意思的，因为我写出来的东西毫无逻辑，总是想到哪就说到哪，没有主次关系，并且很口语化。所以有幸读到这篇“文章”的人请多担待，我就是这样的一个人。</p>]]></content>
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Burst </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux的几个有趣命令</title>
      <link href="/2018/Linux%E7%9A%84%E5%87%A0%E4%B8%AA%E6%9C%89%E8%B6%A3%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/Linux%E7%9A%84%E5%87%A0%E4%B8%AA%E6%9C%89%E8%B6%A3%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="sl命令"><a href="#sl命令" class="headerlink" title="sl命令"></a>sl命令</h1><p>你会看到一辆小货车从屏幕右边开到了左边～  </p><pre><code>安装 $ sudo apt-get install sl运行 $ sl</code></pre><a id="more"></a># fortune命令 #输出一句话，有笑话、名言、唐诗宋词等等：<pre><code>安装 $ sudo apt-get install fortune运行 $ fortune</code></pre><h1 id="cowsay命令"><a href="#cowsay命令" class="headerlink" title="cowsay命令"></a>cowsay命令</h1><p>用ASCII字符打印牛、羊等动物。还有<code>cowthink</code>命令，这是是奶牛想，命令：</p><pre><code>安装 $ sudo apt-get install cowsay运行 $ cowsay -f tux "坑爹啊～"</code></pre><pre><code>$ cowsay -l    查看其他动物的名字$ cowsay -f 动物们 "坑爹啊～"    可其他动物</code></pre><h1 id="cmatrix命令"><a href="#cmatrix命令" class="headerlink" title="cmatrix命令"></a>cmatrix命令</h1><p>这个是《黑客帝国》里面的代码雨，很cool：</p><pre><code>安装 $ sudo apt-get install cmatrix运行 $ cmatrix</code></pre>使用`Ctrl+C`结束。  #figlet、toilet命令 #艺术字生成器，由ASCII字符组成，把文本显示成标题栏。此外还有banner这个命令：<pre><code>安装 $ sudo apt-get install figlet    $ sudo apt-get install toilet运行 $ figlet I LOVE YOU !    $ toilet I LOVE YOU !</code></pre>此外`toilet`还可以添加颜色<pre><code>$ toilet -f mono -F gay I LOVE YOU !</code></pre><h1 id="oneko命令"><a href="#oneko命令" class="headerlink" title="oneko命令"></a>oneko命令</h1><p>这个也比较有趣，桌面上出现一只喵星人，会跟着你的鼠标再跑，<code>Ctrl+C</code>结束：</p><pre><code>安装 $ sudo apt-get install oneko运行 $ oneko</code></pre><h1 id="yes命令"><a href="#yes命令" class="headerlink" title="yes命令"></a>yes命令</h1><p>一直输出字符，使用<code>Ctrl+C</code>结束：</p><pre><code>$ yes I LOVE YOU !</code></pre><h1 id="cal命令"><a href="#cal命令" class="headerlink" title="cal命令"></a>cal命令</h1><p>这个是打印日历：</p><pre><code>$ cal 6 2018</code></pre><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>这些命令是在今日头条看到的，很有趣。</p>]]></content>
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在Linux中使配置alias永久生效</title>
      <link href="/2018/%E5%9C%A8Linux%E4%B8%AD%E4%BD%BF%E9%85%8D%E7%BD%AEalias%E6%B0%B8%E4%B9%85%E7%94%9F%E6%95%88/"/>
      <url>/2018/%E5%9C%A8Linux%E4%B8%AD%E4%BD%BF%E9%85%8D%E7%BD%AEalias%E6%B0%B8%E4%B9%85%E7%94%9F%E6%95%88/</url>
      <content type="html"><![CDATA[<h1 id="编辑-bashrc"><a href="#编辑-bashrc" class="headerlink" title="编辑.bashrc"></a>编辑.bashrc</h1><p>在终端，通过命令回家：</p><p><pre><code><br>cd ~<br></code></pre><br>之后通过文本编辑器编辑文本<code>.bashrc</code>：</p><p><pre><code><br>sudo gedit .bashrc<br></code></pre><br>或者，使用vim编辑：</p><p><pre><code><br>sudo vim .bashrc<br></code></pre><br><a id="more"></a><br>如果没有<code>.bashrc</code>文件，可以自己创建一个，创建也使用上面的命令。<br><em>注：<code>.bashrc</code>是隐藏文件，在文件管理器中查看时需要勾选<code>显示隐藏文件</code>。</em><br>在<code>.bashrc</code>最后一行添加你要设置的alias命令，例如：</p><p><pre><code><br>alias hxc=’rm -f ~/blog/db.json &amp;&amp; hexo clean’<br></code></pre><br>如果是新建的<code>.bashrc</code>文件，直接在里面添加alias命令就可以，命令是一行一行的。<br>添加完之后保存，再通过source命令使刚才的配置文件生效：  </p><p><pre><code><br>source .bashrc<br></code></pre><br>再在终端敲击<code>alias</code>命令，查看已经配置的alias命令，发现刚才编辑的命令都已经出现了。</p><h1 id="编辑-bash-profile"><a href="#编辑-bash-profile" class="headerlink" title="编辑.bash_profile"></a>编辑.bash_profile</h1><p>在<code>.bash_profile</code>最后一行添加一条命令：</p><p><pre><code><br>source ~/.bash_profile<br></code></pre><br>注：如果没有<code>.bash_profile</code>文件就新建一个。<br>添加完之后保存退出，终端通过source命令使配置生效：</p><p><pre><code><br>source .bash_profile<br></code></pre><br>此时可以重新打开终端，输入<code>alias</code>命令，查看配置的alias是否已经生效。</p>]]></content>
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> alias </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一个更为先进的文本编辑器-Atom</title>
      <link href="/2018/%E4%B8%80%E4%B8%AA%E6%9B%B4%E4%B8%BA%E5%85%88%E8%BF%9B%E7%9A%84%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8-Atom/"/>
      <url>/2018/%E4%B8%80%E4%B8%AA%E6%9B%B4%E4%B8%BA%E5%85%88%E8%BF%9B%E7%9A%84%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8-Atom/</url>
      <content type="html"><![CDATA[<h1 id="最近"><a href="#最近" class="headerlink" title="最近"></a>最近</h1><p> &ensp;&ensp;&ensp;&ensp;开始使用Markdown编辑文本，但是一款好的文本编辑器可以让我更能体会到打字的乐趣。<br>  &ensp;&ensp;&ensp;&ensp;百度一下Markdown文本编辑器，会有很多种，我下载了一个人气比较高的，名为<code>MarkdownPad2</code>,的，这个编辑器上面有很多设定好的按钮，类似word一样，只需要点击就可以实现设置标题，加粗，插入代码等操作，但是用了半天之后，感觉它并不是我想要的，因为它看着有点儿老气横秋了。<br> <a id="more"></a><br>  &ensp;&ensp;&ensp;&ensp;之后是网上无意之间看到的，一款名为<code>Atom</code>的文本编辑器，它刚上来的主题类似于<code>sublime</code>，但是感觉要比<code>sublime</code>更为干净简介。<br>  &ensp;&ensp;&ensp;&ensp;科普了一下：<code>Atom 是github专门为程序员推出的一个跨平台文本编辑器。具有简洁和直观的图形用户界面，并有很多有趣的特点：支持CSS，HTML，JavaScript等网页编程语言。它支持宏，自动完成分屏功能，集成了文件管理器。</code><br>  &ensp;&ensp;&ensp;&ensp;作为一个现代的代码编辑器，<code>Atom</code>有着各种流行编辑器都有的特性，功能上非常丰富，支持各种编程语言的代码高亮(HTML / CSS / Javascript / PHP / Python / C / C++ / Objective C / Java / JSON / Perl / CoffeeScript / Go / Sass / YAML / Markdown 等等)。与大多数其他编辑器相比，Atom的语言支持已经算是覆盖非常全面了。另外，它的代码补全功能（也叫Snippets） 也非常好用，你只需输入几个字符即可展开成各种常用代码，可以极大提高编程效率。<br> &ensp;&ensp;&ensp;&ensp;在编辑Markdown文本时，可通过<code>Ctrl+Shift+M</code>,实时分屏预览。并且它完全免费。<br> &ensp;&ensp;&ensp;&ensp;Atom的<a href="https://atom.io/" target="_blank" rel="noopener">下载地址</a>，感兴趣的朋友不妨试一试。</p>]]></content>
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> GitHub </tag>
            
            <tag> Atom </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HEXO问题：换电脑之后怎么办</title>
      <link href="/2018/HEXO%E9%97%AE%E9%A2%98%E6%8D%A2%E7%94%B5%E8%84%91%E4%B9%8B%E5%90%8E%E6%80%8E%E4%B9%88%E5%8A%9E/"/>
      <url>/2018/HEXO%E9%97%AE%E9%A2%98%E6%8D%A2%E7%94%B5%E8%84%91%E4%B9%8B%E5%90%8E%E6%80%8E%E4%B9%88%E5%8A%9E/</url>
      <content type="html"><![CDATA[<h1 id="前言-可忽略不看"><a href="#前言-可忽略不看" class="headerlink" title="前言(可忽略不看)"></a>前言(可忽略不看)</h1><p>这个问题是在我部署完HEXO博客之后就想到的，我要是换了一台电脑或者重新装系统之后，还怎么更新HEXO博客呢？<br>我今天在网上开始寻找解决办法，上网一看才知道这是很多人很早以前就面临的问题，当然有很多大神做了解答，但是绝大多数的回答我都是看不懂的。大多数的办法是在同一个GitHub仓库创建两个分支，一个用来存放HEXO上传的静态页面，一个用来保存HEXO的本地源文件。但是对于我这个小白来说，仓库一词我都是最近才知道的，更别提分支了。还有一大堆的命令，我也看不懂所以然。<br>最后，我还是用了这个办法，在原有的仓库基础上再创建一个分支，用来保存本地的源文件。（网上主要的还是这个办法）<br>我试着把我的操作流程写下来，可能其中会有遗漏或者小错误，遇到问题只能自己解决了。因为我也是凭借自己理解操作的。<br><a id="more"></a></p><h1 id="我为什么要把源文件上传到GitHub呢？"><a href="#我为什么要把源文件上传到GitHub呢？" class="headerlink" title="我为什么要把源文件上传到GitHub呢？"></a>我为什么要把源文件上传到GitHub呢？</h1><p>因为我今天在电脑上安装了Linux，所以以后敲字都要靠Linux了。  </p><h1 id="一-解决方案："><a href="#一-解决方案：" class="headerlink" title="一.解决方案："></a>一.解决方案：</h1><h2 id="1-提前准备"><a href="#1-提前准备" class="headerlink" title="1.提前准备"></a>1.提前准备</h2><p>首先，不论是在另一台电脑上还是重新安装了系统，都要安装好<code>Node.js</code>和<code>Git</code>，还有<code>HEXO</code>，它们的安装方式具体参考HEXO的<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">说明文档</a>。  </p><h2 id="2-操作流程"><a href="#2-操作流程" class="headerlink" title="2.操作流程"></a>2.操作流程</h2><p>1.登录到GitHub，打开HEXO所在的仓库，在<code>Branch</code>（分支）新建一个分支<code>hexo</code>，在仓库<code>Setting</code>下的<code>Branches</code>中，设置默认分支分<code>hexo</code>。<br>2.克隆GitHub上的XXX.github.io项目的文件到本地，命令如下：  </p><p><pre><code><br>git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:ENNRIaaa/sora.red.git<br></code></pre><br>把链接换成自己仓库的链接。（我的是sora.red是因为我把仓库名修改了，正常默认格式是：XXX.github.io）。<br><em>注：克隆的文件夹保存在哪取决于你<code>Git bash</code>所在的位置，可通过<code>pwd</code>命令查看你当前所在位置。</em><br>3.克隆好之后，打开本地的文件夹，默认的文件夹名称是：<code>XXX.github.io</code>，把文件夹内除了<code>.git</code>文件夹之外的所有文件全部删除。我用的是Linux，<code>.git</code>是隐藏文件夹，不知道在Windows下是不是隐藏文件，如果是的话，打开<code>显示隐藏文件</code>。<br>4.之后把原电脑上的HEXO文件全部复制到这个<code>XXX.github.io</code>文件夹下。<br>5.复制完之后里面应该有一个名为<code>.gitignore</code>文件，如果没有的话在终端通过命令：</p><p><pre><code><br>touch .gitignore<br></code></pre><br>创建一个。正常<code>.gitignore</code>的内容是：<br><code>.DS_Store</code><br><code>Thumbs.db</code><br><code>db.json</code><br><code>*.log</code><br><code>node_modules/</code><br><code>public/</code><br><code>.deploy*/</code><br>6.创建一个分支<code>hexo</code>并切换到这个分支上，命令如下：</p><p><pre><code><br>git checkout -b hexo<br></code></pre><br>7.提交复制过来的文件到暂存区，命令如下：</p><p><pre><code><br>git add - -all<br></code></pre><br>注意：<code>-</code>之间无空格！  </p><p>8.提交，命令如下：</p><p><pre><code><br>git commit -m “新建分支资源文件”<br></code></pre><br>引号内的内容自定义，就是一个备注。<br>9.推送分支到GitHub上，命令如下：</p><p><pre><code><br>git push - -set-upstream origin hexo<br></code></pre><br>注意：<code>-</code>之间无空格！<br>推送成功之后，到GitHub仓库刷新一下，看看<code>hexo</code>分支下是否已经成功上传了本地的源文件。<br>到这里，本地的源文件已经上传成功了。以后更新HEXO本地源文件直接使用<code>git push</code>命令就可以了，HEXO发博客的操作跟以前一样，还是这三步：<code>hexo c</code>、<code>hexo g</code>、<code>hexo d -g</code>。  </p><p><em>注：期间终端可能会提示需要输入一下密码啊，或者提示让你输入邮箱和用户名等，只需根据提示输入即可。<br>在安装完Git和node.js之后，我就把SSH密钥配置完了。设置GitHub的SSH密钥，可参考<a href="https://sora.red/2018/GitHub%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AESSH/">GitHub如何配置SSH</a>。</em>  </p><h1 id="二-如果今后换电脑该如何操作"><a href="#二-如果今后换电脑该如何操作" class="headerlink" title="二.如果今后换电脑该如何操作"></a>二.如果今后换电脑该如何操作</h1><p>本地源文件保存到GitHub之后，今后在其他电脑上或者重装系统后，先把<code>Git</code>、<code>Node.js</code>、<code>HEXO</code>这些基本的都安装好,（<em>注意：<code>HEXO</code>安装好之后不要执行<code>hexo init</code>初始化命令</em>），再把GitHub上保存HEXO源文件的<code>hexo</code>分支克隆到本地即可。<br>克隆分支的命令：</p><p><pre><code><br>git clone -b hexo <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:ENNRIaaa/sora.red.git<br></code></pre><br><code>-b</code>后面的是分支的名称，后面替换自己仓库的链接。</p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>今天主要提供帮助的是CSDN博主LeonWuV,如果我的文章有一些地方看不懂，或者有错误，可参考<a href="https://blog.csdn.net/wxl1555/article/details/79293159" target="_blank" rel="noopener">此博主的文章</a>。<br>本文写了一个多小时，终于结束了。虽然很墨迹，但是很快乐。</p>]]></content>
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GitHub如何配置SSH</title>
      <link href="/2018/GitHub%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AESSH/"/>
      <url>/2018/GitHub%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AESSH/</url>
      <content type="html"><![CDATA[<h1 id="生成SSH-Key"><a href="#生成SSH-Key" class="headerlink" title="生成SSH Key"></a>生成SSH Key</h1><p>在Git Bash终端输入命令：</p><p><pre><code><br>ssh-keygen -t rsa -C “<a href="mailto:china_liyan123@yahoo.co.jp" target="_blank" rel="noopener">china_liyan123@yahoo.co.jp</a>“<br></code></pre><br>此处邮箱替换为自己的邮箱地址。<br>此处终端提示：</p><blockquote><p>Generating public/private rsa key pair.<br>Enter file in which to save the key (/c/Users/shado/.ssh/id_rsa):<br><a id="more"></a>  </p></blockquote><p>终端会让你选择存放SSH的路径，括号内的是默认路径。<br>回车选择默认路径之后，终端提示输入SSH密码，输入两次，此时输入的密码不会显示在终端上，输入完直接回车就可以。  </p><blockquote><p>Your identification has been saved in /c/Users/shado/.ssh/id_rsa.<br>Your public key has been saved in /c/Users/shado/.ssh/id_rsa.pub.</p></blockquote><p>之后终端提示密钥已经生成，在刚才选择的路径中，其中<code>id_rsa</code>是私有密钥，<code>id_rsa.pub</code>是公共密钥。  </p><h1 id="在GitHub中添加密钥"><a href="#在GitHub中添加密钥" class="headerlink" title="在GitHub中添加密钥"></a>在GitHub中添加密钥</h1><p>登陆GitHub，在页面右上角头像下拉菜单中单机<code>Setting</code>，设置页面左侧有<code>SSH and GPG keys</code>,在这个标签页下添加SSH。<br>右上角<code>New SSH key</code>，在本地刚刚保存SSH的路径，用文本编辑器打开<code>id_rsa.pub</code>，复制里面的内容，粘贴到<code>New SSH key</code>的key里面，Title自己定义一个标题就可以，之后Add。<br>回到终端，输入命令：</p><p><pre><code><br>ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a><br></code></pre><br>此时终端提示：  </p><blockquote><p>Enter passphrase for key ‘/c/Users/shado/.ssh/id_rsa’:  </p></blockquote><p>输入之前的密码，此时密码也是不会显示在终端上的。<br>密码输入正确后，终端提示：  </p><blockquote><p>Hi ENNRIaaa! You’ve successfully authenticated, but GitHub does not provide shell access.</p></blockquote><p>说明SSH密钥已经配置成功。</p>]]></content>
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>六月日记：6月12日_N5语法</title>
      <link href="/2018/%E5%85%AD%E6%9C%88%E6%97%A5%E8%AE%B0%EF%BC%9A6%E6%9C%8812%E6%97%A5_N5%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/%E5%85%AD%E6%9C%88%E6%97%A5%E8%AE%B0%EF%BC%9A6%E6%9C%8812%E6%97%A5_N5%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="名词的用法"><a href="#名词的用法" class="headerlink" title="名词的用法"></a>名词的用法</h1><h2 id="名词的普通形和礼貌形"><a href="#名词的普通形和礼貌形" class="headerlink" title="名词的普通形和礼貌形"></a>名词的普通形和礼貌形</h2><h2 id="名词的形态"><a href="#名词的形态" class="headerlink" title="名词的形态"></a>名词的形态</h2><h1 id="形容动词的用法"><a href="#形容动词的用法" class="headerlink" title="形容动词的用法"></a>形容动词的用法</h1>]]></content>
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Diary </tag>
            
            <tag> 日本語 </tag>
            
            <tag> N5语法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Markdown:易读易写</title>
      <link href="/2018/Markdown%E6%98%93%E8%AF%BB%E6%98%93%E5%86%99/"/>
      <url>/2018/Markdown%E6%98%93%E8%AF%BB%E6%98%93%E5%86%99/</url>
      <content type="html"><![CDATA[<h1 id="关于Markdown"><a href="#关于Markdown" class="headerlink" title="关于Markdown"></a>关于Markdown</h1><blockquote><p>Markdown 的目标是实现「易读易写」。    </p></blockquote><p>由HEXO认识了Markdown，它简洁的语法，让我深深地爱上了它。今天是使用Markdown写博客的第二天，只用到一些简单的标签。<br>它给我最大的感觉就是格式非常清晰，看起来也非常的规整。有一种规规矩矩的感觉。<br>它兼容HTML，它可以在文本中使用HTML标签。  </p><blockquote><p>Markdown 语法的目标是：成为一种适用于网络的书写语言。<br><a id="more"></a><br>Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p></blockquote><h1 id="关于HEXO"><a href="#关于HEXO" class="headerlink" title="关于HEXO"></a>关于HEXO</h1><p>上周末部署HEXO到GitHub，今天发了几篇博客，深感Markdown和HEXO的魅力。或许是因为我是小白的缘故。<br>HEXO可以自动生成文章目录，它使得文章变得更清晰。其它的博客系统如何生成文章目录我还不知道。对于前端这块儿我是一点儿也不清楚的。或许将来我能通过自己的代码来达到我想要的功能。<br>使用Z-Blog，发文章是要先登陆到后台，然后在线通过编辑器写文。而使用HEXO搭配GitHub，则是写文再上传。在本地通过Markdown编辑器写好博客，然后再上传到GitHub上，这更让我有一种写博客的乐趣。</p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>我深知自己不懂的东西太多，但这更能让我知道如何充实我自己。</p>]]></content>
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vim简单用法</title>
      <link href="/2018/vim%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/"/>
      <url>/2018/vim%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我是个记性很差的人，一些东西经常不用就会忘记它们的使用方法，例如一些不经常用的命令。所以写博客成了一件很有意义的事情:  </p><blockquote><ol><li>它可以记录很多事情，自己学会的新技能可以通过它记录下来  </li><li>可以培养耐心，学会坚持做一件事儿  </li><li>会产生成就感</li></ol></blockquote><h1 id="vim的简单用法"><a href="#vim的简单用法" class="headerlink" title="vim的简单用法"></a>vim的简单用法</h1><p>工作模式有三种：<code>正常模式</code>、<code>插入模式</code>、<code>尾行模式</code><br><code>vim filename：打开文件，若不存在则新建</code><br><code>vim filename +n：打开文件，定位到第n行</code><br><code>vim filename +：打开文件，定位到末尾</code><br><a id="more"></a></p><h2 id="正常模式"><a href="#正常模式" class="headerlink" title="正常模式"></a>正常模式</h2><p><code>esc：切换到正常模式</code><br><code>shift+zz：保存退出</code><br><code>gg：定位到首行</code><br><code>G：定位到尾行</code><br><code>ngg：定位到第n行</code><br><code>^：定位到行首</code><br><code>$：定位到行尾</code><br><code>yy：复制光标所在行</code><br><code>p：粘贴</code><br><code>nyy：复制光标开始的n行</code><br><code>dd：删除光标所在行，（或者剪切，按p复制）</code><br><code>ndd：删除光标开始的n行</code><br><code>u：撤销操作</code><br><code>ctrl+r：反撤销操作</code></p><h2 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h2><p><code>i：在光标处插入</code><br><code>I：在行首插入</code><br><code>a：在光标下一个字符处插入</code><br><code>A：在行尾插入</code><br><code>o：在光标下一行插入空行</code><br><code>O：在光标上一行插入空行</code><br><code>s：删除光标所在字符并插入</code><br><code>S：删除光标所在行并插入</code></p><h2 id="尾行模式"><a href="#尾行模式" class="headerlink" title="尾行模式"></a>尾行模式</h2><p><code>:w 退出</code><br><code>:q 退出</code><br><code>:wq 保存并退出</code><br><code>:x 保存并退出</code><br><code>:q! 强制退出</code><br><code>:set nu 显示行号</code><br><code>:set nonu 隐藏行号</code><br><code>:行号 定位到指定行号</code><br><code>/内容 查找指定内容，n下翻，N上翻</code><br><code>:%s/原内容/新内容 使用新内容替换原内容</code><br><code>:m,ns/原内容/新内容 使用新内容替换原内容，替换m到n行</code></p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>如果没有正常关闭vim，会生成一个交换文件，这个是需要删除的。<br>原文来自CSDN的博主AbeBetter，<a href="https://blog.csdn.net/abebetter/article/details/77542002" target="_blank" rel="noopener">原文地址</a>。<br>感谢博主给出这么简单直白的使用方法。</p>]]></content>
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>六月日记：6月11日_N4语法</title>
      <link href="/2018/%E5%85%AD%E6%9C%88%E6%97%A5%E8%AE%B0%EF%BC%9A6%E6%9C%8811%E6%97%A5_N4%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/%E5%85%AD%E6%9C%88%E6%97%A5%E8%AE%B0%EF%BC%9A6%E6%9C%8811%E6%97%A5_N4%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="可能动词"><a href="#可能动词" class="headerlink" title="可能动词"></a>可能动词</h1><h2 id="可能动词的变换方法"><a href="#可能动词的变换方法" class="headerlink" title="可能动词的变换方法"></a>可能动词的变换方法</h2><blockquote><p>五段动词：词尾由ウ段假名变为所在行的エ段假名后接る<br>一段动词：去掉词尾る后接られる<br>サ变动词：する＞できる<br>カ变动词：来（く）る＞来（こ）られる<br><code>注：所有的可能动词都是一段动词。可能动词不是表示动作二十表示状态，因此属于无意志动词。他动词的宾语用を表示，但是可能动词句中的对象一般用が表示。</code><br><a id="more"></a></p></blockquote><h2 id="可能动词的语法意思"><a href="#可能动词的语法意思" class="headerlink" title="可能动词的语法意思"></a>可能动词的语法意思</h2><ol><li>表示人的行为能力。可译为“能…；会…”<br><code>例：一人で学校へ行けますか。</code><br><code>例：私はローマ字しか書けません。</code>  </li><li>表示某种状态下行为的可能性。可译为“可以…”<br><code>例：ここに車が止められません。</code></li></ol><h2 id="可能动词的相关句型"><a href="#可能动词的相关句型" class="headerlink" title="可能动词的相关句型"></a>可能动词的相关句型</h2><p>～ことができる<br>①接续：动词字典形<br>意味：表示人的行为能力。“能…；会…”<br><code>例：ピアノを弾くことができますか。</code><br><code>例：妹は料理を作ることができます。</code><br>②接续：动词字典形<br>意味：表示某种状态下的行为的可能性。可译为：“可以…”<br><code>例：雪がたくさん降りましたから、今年スキーをすることができます。</code><br><code>例：ここに自転車を置くことができません。</code></p><h1 id="动词意向形"><a href="#动词意向形" class="headerlink" title="动词意向形"></a>动词意向形</h1><h2 id="动词意向形的变换方法"><a href="#动词意向形的变换方法" class="headerlink" title="动词意向形的变换方法"></a>动词意向形的变换方法</h2><blockquote><p>五段动词：词尾由ウ段假名变为所在行的オ段假名后接う<br>一段动词：去掉词尾る后接よう<br>サ变动词：する＞しよう<br>カ变动词：来る＞来よう</p></blockquote><h2 id="动词意向形的语法意思"><a href="#动词意向形的语法意思" class="headerlink" title="动词意向形的语法意思"></a>动词意向形的语法意思</h2><p>动词的意向形是「～ましょう」的简体形，用于简体句中，表示提议、劝诱、意志等。<br><code>例：冬休みに一緒にスキーに行こう。</code>  </p><h2 id="动词意向形的相关句型"><a href="#动词意向形的相关句型" class="headerlink" title="动词意向形的相关句型"></a>动词意向形的相关句型</h2><ol><li>～う/ようと　思う<br>～う/ようと　思っている<br>接续：动词意向形<br>意味：表示第一人称自己的意志。其中「～う/ようと　思っている」可以用第一人称，也可以用于第三人称。表示说话前已经下定了觉醒，现在还仍然持续着的意思。<br><code>連休は家でゆっくり休もうと思います。</code><br><code>父はお酒をやめようと思っています。</code>  </li><li>～う/ようと　する<br>①接续：动词意向形<br>意味：表示动作或者变化将要开始或者结束。无人称上的限制。可译为：“刚要…；将要…”<br><code>時計は午前八時を報せようとしています。</code><br><code>冬休みは終わろうとしています。</code><br>②接续：动词意向形<br>意味：表示某人努力去实现某目标。想要去做某事。无人称上的限制。可译为：“想要…”<br><code>例：娘は北京大学に入ろうとしています。</code><br><code>いくら思い出そうとしても、彼女の名前が思い出せない。</code></li></ol><h1 id="被动动词"><a href="#被动动词" class="headerlink" title="被动动词"></a>被动动词</h1><h2 id="被动动词的变换方法"><a href="#被动动词的变换方法" class="headerlink" title="被动动词的变换方法"></a>被动动词的变换方法</h2><blockquote><p>五段动词：词尾由ウ段假名变为所在行的ア段假名后接れる<br>一段动词：去掉词尾る后接られる<br>サ变动词：する＞される<br>カ变动词：来る＞来られる  </p></blockquote><p>注：所有的被动动词都是一段动词。</p><h2 id="被动动词的语法意思"><a href="#被动动词的语法意思" class="headerlink" title="被动动词的语法意思"></a>被动动词的语法意思</h2><p>待写</p><h1 id="使役态"><a href="#使役态" class="headerlink" title="使役态"></a>使役态</h1><h2 id="使役动词的变换方法"><a href="#使役动词的变换方法" class="headerlink" title="使役动词的变换方法"></a>使役动词的变换方法</h2><blockquote><p>五段动词：词尾由ウ段假名变为所在行的ア段假名后接せる<br>一段动词：去掉词尾る后接させる<br>サ变动词：する＞させる<br>カ变动词：来る＞来させる  </p></blockquote><p>注：所有的使役动词都是一段动词。</p><h2 id="使役态的语法意思"><a href="#使役态的语法意思" class="headerlink" title="使役态的语法意思"></a>使役态的语法意思</h2><ol><li>自动次的使役态<br>形式：AはBを自动词（せる/させる）<br>意味：表示强制或容许。即地位高的人A强制地位低的人B做某个行为，或者是容许地位低的人B的行为。<br><code>例：親は子供を塾に通わせます。</code><br><code>例：私は子供を買い物に行かせます。</code></li><li>他动词的使役态<br>形式：AはBに宾语を他动词（せる/させる）<br>意味：表示强制或容许。即地位高的人A强制地位低的人B做某个行为，或者是容许地位低的人B的行为。<br><code>例：私は子供に薬を飲ませました。</code><br><code>例：先生は学生に本を読ませます。</code></li><li>感情动词的使役态<br>形式：AはBを感情动词（せる/させる）<br>意味：表示A为了某种目的触发或者故意诱发B的感情达到某种状态。出现的动词常为表示感情的自动词。如「泣く、困る、笑う、怒る」等。<br><code>例：子供の時、体が弱くて、母を心配させました。</code><br><code>例：田中さんはいつも笑い話をして、皆を笑わせます。</code></li></ol><h2 id="使役态的相关句型"><a href="#使役态的相关句型" class="headerlink" title="使役态的相关句型"></a>使役态的相关句型</h2><p>～（さ）せてください　/　～（さ）せてくださいませんか　/　～（さ）せていただけませんか<br>接续：动词的使役形<br>意味：表示请求对方允许我做某事。其中「～（さ）せてくださいませんか/～（さ）せていただけませんか」比「～（さ）せてください」表达的更加委婉，礼貌。可译为：“请允许我…”<br><code>部長、この仕事は私にやらせてください。</code></p><h1 id="敬语"><a href="#敬语" class="headerlink" title="敬语"></a>敬语</h1><h2 id="尊敬语"><a href="#尊敬语" class="headerlink" title="尊敬语"></a>尊敬语</h2><h2 id="自谦语"><a href="#自谦语" class="headerlink" title="自谦语"></a>自谦语</h2><h2 id="礼貌语"><a href="#礼貌语" class="headerlink" title="礼貌语"></a>礼貌语</h2><h1 id="ば・と・たら・ては"><a href="#ば・と・たら・ては" class="headerlink" title="ば・と・たら・ては"></a>ば・と・たら・ては</h1><h2 id="假定形「～ば-たら」"><a href="#假定形「～ば-たら」" class="headerlink" title="假定形「～ば/たら」"></a>假定形「～ば/たら」</h2><h3 id="假定形的变换方法"><a href="#假定形的变换方法" class="headerlink" title="假定形的变换方法"></a>假定形的变换方法</h3><blockquote><p><strong>动词：词尾由ウ段假名变为所在行的エ段假名后接ば</strong><br>五段动词：<br><code>言う＞言えば</code><br><code>書く＞書けば</code><br><code>貸す＞貸せば</code><br><code>死ぬ＞死ねば</code><br>一段动词：<br><code>見る＞見れば</code><br><code>寝る＞寝れば</code><br><code>借りる＞借りれば</code><br><code>食べる＞食べれば</code><br>サ变动词：<br><code>する＞すれば</code><br>カ变动词：<br><code>来る＞来れば</code><br>形容词：词干+「ければ」<br><code>寒い＞寒ければ</code><br><code>よい/いい＞よければ</code><br>形容动词/名词：字典形+なら<br><code>便利＞便利なら</code><br><code>私＞私なら</code></p></blockquote><h3 id="假定形的语法意思"><a href="#假定形的语法意思" class="headerlink" title="假定形的语法意思"></a>假定形的语法意思</h3><ol><li>意味：表示恒定条件。强调必然性，客观性。表示通常一定会成立的规律性、法则性关系。<br><code>例：春が来れば、花が咲きます。</code><br><code>例：いい天気なら、向こうに島が見えます。</code>  </li><li>意味：表示假定条件。后句可以接表示人意志、判断、许可、希望等句型。<br><code>例：あなたが行けば、私も行きます。</code><br><code>例：使い方が簡単なら、私も買いたいです。</code>  </li><li>接续：各品词的字典形或者「た」形+なら<br>意味：用于承接对方的话题。后句叙述自己的意见或者劝告等。<br><code>例：旅行に行きたいですが、どこかいい所はありませんか。</code><br><code>スキーなら、北海道がいいですよ。</code>  </li></ol><h3 id="假定形的相关句型"><a href="#假定形的相关句型" class="headerlink" title="假定形的相关句型"></a>假定形的相关句型</h3><ol><li>〜たら<br>接续：各品词普通形的过去式+「ら」<br>意味：表示架设。常和副词「もし」搭配使用。<br><code>例：お金があったら、旅行に行きたいです。</code><br><code>例：いい天気だったら、散歩しましょう。</code>  </li></ol>]]></content>
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Diary </tag>
            
            <tag> 日本語 </tag>
            
            <tag> N4语法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于这个周末</title>
      <link href="/2018/%E5%85%B3%E4%BA%8E%E8%BF%99%E4%B8%AA%E5%91%A8%E6%9C%AB/"/>
      <url>/2018/%E5%85%B3%E4%BA%8E%E8%BF%99%E4%B8%AA%E5%91%A8%E6%9C%AB/</url>
      <content type="html"><![CDATA[<h3 id="2018年6月10日-星期日"><a href="#2018年6月10日-星期日" class="headerlink" title="2018年6月10日-星期日"></a>2018年6月10日-星期日</h3><p>本来打算这周末是好好看日语的，但是却没能静下心来看，因为时间都花在搞HEXO和GitHub上了。<br>之前我是不知道GitHub的，因为前几天的新闻，微软75亿美元收购GitHub，所以对它有些印象。<br>之前在电脑上装过linux，然后了解到了开源，其实再早知道开源一词是因为Android，大概是在我上高中的时候，那时候Android手机刚刚进入市场，我的第一部Android手机是我大哥给我买的，HTC G8，当时还是Android 2.0的系统。那会儿每天都研究这个，一遍一遍的刷机，回想那时候，玩得真起劲。慢慢地，知道Android的底层是linux，知道它是一个开源的系统。但是仅仅停留在“字面意思”。<br>由linux系统开始深入了解它的背景，知道linus这个人，知道Git。当然，我现在仍然不知道Git到底是做什么的，也不清楚GitHub究竟是做什么的。<a id="more"></a><br>在我上小学的时候，我就想以后到大学要学计算机、学编程，然后开发出一款软件，一款游戏，再卖好多好多钱。可是随着时间的推移，高考填志愿的时候却因瞬间的想法，而没有选择计算机这条路。人每个时期的想法真是不同。<br>现在已经毕业三年了，当我想再开始学习编程时，不知道社会还会不会给我机会。但我总想着学习到什么时候都不晚。即使现在我仍然只是会些皮毛。<br>我现在的状态很浮躁，很难静下心来去学习，去做什么。当在网上找到感兴趣的事物时，沉浸去研究的时候，这段时间是最幸福的，可以抛开一切烦恼什么都不去想，安心地去做它。<br>就好比这周末，认识了HEXO和GitHub。之前在自学java的时候，只是每天看着视频课件，从来都没有接触过新的东西，也无从知道。看到GitHub之后就像是看到新大陆一样，让我奋不顾身想上去一探究竟。<br>自此我才知道，程序员的世界，每天接触的还有这些东西。<br>我现在之所以想要选择做程序员，是因为他们每天都能接触到新的事物，每天要接受这个世界的新技术，并且还要为这个世界创造新技术，在我眼里，程序员就像是某一领域的创造者。<br>不知道未来的我什么时候才能自称程序员，但我现在仍为了这一目标而努力。<br>呃~写跑题了，我是一个说话没有主题的人。<br>从昨天到今天，HEXO部署成功，学到了很多东西，让我很happy，即便现在仍有许多小问题。可能这件事儿在很多人眼里看根本不算什么，但从开始到结束这一过程让我很开心。通过HEXO，还知道一些关于Node.js、Git的东西，还知道了Markdown…，一项事物往往是很多事物的集合。<br>好了，这就是我的周末。<br><em>写于2018年6月10日</em></p>]]></content>
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Diary </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>小白部署HEXO到GitHub</title>
      <link href="/2018/%E5%B0%8F%E7%99%BD%E9%83%A8%E7%BD%B2HEXO%E5%88%B0GitHub/"/>
      <url>/2018/%E5%B0%8F%E7%99%BD%E9%83%A8%E7%BD%B2HEXO%E5%88%B0GitHub/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>呃，终于忙乎完了！<br>从昨天傍晚的7点半一直到现在的2点50分，并且到目前都还在折腾，这也是第一篇文章，即将要上传到GitHub上的.<br>之前我是没有接触过GitHub和HEXO的，我现在在用的博客程序是z-blog，它部署在腾讯云，地址是：<a href="https:www.shiguangping.com" target="_blank" rel="noopener">时光瓶</a>,现在之所以搞hexo，是因为看到了一位前端大咖的博客，<a href="https://diygod.me/" target="_blank" rel="noopener">diygod.me</a>，看到之后很惊艳，由此认识到了hexo和GitHub.<br>通过维护这个博客开始我的学习之旅，慢慢了解GitHub，了解开源世界。<br>然后说一下现在正在用的这个HEXO主题，这个主题是像素风格的，很有魔性，所以就采用了。在此感谢主题的作者，作者的博客有关于这个主题的说明，虽然我看作者已经很久没有更新他的博客了，<a href="http://blackshow.me/" target="_blank" rel="noopener">主题作者</a>.<br><a id="more"></a></p><h1 id="本地安装HEXO"><a href="#本地安装HEXO" class="headerlink" title="本地安装HEXO"></a>本地安装HEXO</h1><p>hexo的官方文档：<a href="https://hexo.io/zh-cn/docs/" title="中文地址" target="_blank" rel="noopener">中文地址</a>，里面的安装步骤写得非常详细清晰。直到文档的“<strong>开始使用</strong>”部分的“<strong>配置</strong>”，到这里为止，博客本地部署基本完成。通过命令，在浏览器看一下页面的效果:命令如下：</p><p><pre><code><br>$ hexo server<br></code></pre><br>启动服务，默认情况下，使用浏览器访问地址://localhost:4000/，如果这个地址无效，可通过命令：</p><p><pre><code><br>$ hexo server -p 5000<br></code></pre><br>重设端口，再来来尝试一下，访问地址://localhost:5000/.如果可以正常访问，页面正常，说明本地配置OK。</p><h1 id="下载和安装主题"><a href="#下载和安装主题" class="headerlink" title="下载和安装主题"></a>下载和安装主题</h1><p>我使用的主题是<a href="http://blackshow.me" title="blackshow" target="_blank" rel="noopener">blackshow</a>编写的开源主题，该主题基于Freemind修改，样式替换为BOOTSTR.386.作者的博客里有提到。  </p><ol><li>安装主题：<br><pre><code><br>$ git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:blackshow/hexo-theme-freemind.386.git themes/freemind<br></code></pre>  </li><li>安装 hexo-tag-bootstrap （可选）:<br><pre><code><br>$ npm install hexo-tag-bootstrap –save<br></code></pre>  </li><li>安装 hexo-generatr-search （可选）：<br><pre><code><br>$ npm install hexo-generator-search –save<br></code></pre>  </li><li>创建页面：<br>Freemind 预先定义了 Categories（分类）、Tags（标签） 和 About（关于）页面，要使用它们，你需要先在你的博客的 <code>source</code> 目录中添加相应页面。<br>例如，要创建 <code>Categories</code> 页面，在终端上:<br><pre><code><br>$ cd /path/to/hexo/<br>hexo n page categories<br></code></pre><br>然后编辑 <code>source/categories/</code> 下的 index.md，内容如下：<br><pre><code><br>title: Categories<br>layout: categories<br><p>—</p><br></code></pre>  </li><li>关于主题的配置和一些相关问题，具体请参考主题作者的<a href="http://blackshow.me/2015/11/25/hexo-theme-freemind-386-readme-cn/" title="说明" target="_blank" rel="noopener">说明文档</a>和原作者关于Freemind的<a href="http://www.hahack.com/codes/hexo-theme-freemind/" title="说明文档" target="_blank" rel="noopener">说明文档</a>。  </li><li>每一步如果想预览，使用一下命令，通过浏览器预览访问本地预览：<br><pre><code><br>$ hexo server<br><pre><code></code></pre></code></pre></li></ol><h1 id="把本地HEXO部署到GitHub"><a href="#把本地HEXO部署到GitHub" class="headerlink" title="把本地HEXO部署到GitHub"></a>把本地HEXO部署到GitHub</h1><ol><li>注册GitHub帐号，然后登陆。    –废话    </li><li>在GitHub新建一个repository，页面的右上角有个加号，里面的New repository<br>这里的Repository Name要和前面的Owner名字相同，格式就是这样的ENNRIaaa.github.io，ENNRIaaa就是我的Owner名字，然后选择public，创建就可以了。  </li><li>编辑HEXO目录下的站点配置文件<code>_config.yml，</code>在最下面加上几行<br><pre><code><br>deploy:<br>   type: git<br>   repository: <a href="https://github.com/ENNRIaaa/ENNRIaaa.github.io.git" target="_blank" rel="noopener">https://github.com/ENNRIaaa/ENNRIaaa.github.io.git</a><br>   branch: master<br></code></pre><br>把地址替换为自己GitHub库的地址，然后通过命令：<br><pre><code><br>$ hexo c<br>$ hexo g<br>$ hexo d -g<br></code></pre><br>此时可能会提示输入GitHub的用户名和密码。我看网上有教程说此步骤需要配置SSH，这个由于我没有配置，也不太懂，所以不多说明。<br>本地文件上传到GitHub之后，访问刚才的<strong>ENNRIaaa.github.io</strong>，看看是否能正常访问到你的博客。</li></ol><h1 id="绑定个人域名"><a href="#绑定个人域名" class="headerlink" title="绑定个人域名"></a>绑定个人域名</h1><p>如果你不需要绑定个人域名，可以忽略这一步，博客可直接通过ENNRIaaa.github.io访问。  </p><ol><li>在你域名的解析页面添加解析，我是添加的CNAME，直接解析ENNRIaaa.github.io，有的人添加的A记录解析的博客的IP地址。  </li><li>在刚刚创建的GitHub的repository，选择Setting标签页，在下面的GitHub Pages里面有Custom domain，填上你的域名，Save就可以了。如果没有Custom domain，那就把GitHub Pages下的Source改为master branch。  </li><li>在访问绑定的域名，看看是否能正常访问到博客。</li></ol><h1 id="关于新建文章"><a href="#关于新建文章" class="headerlink" title="关于新建文章"></a>关于新建文章</h1><p>新建文章需要使用markdown文档编辑工具，我使用的是<a href="http://markdownpad.com/" target="_blank" rel="noopener">MarkdownPad</a>这款工具.<br>文章的头部通过这几个标签来定义标题，日期，描述，分类，标签等…（具体只能靠自己摸索）</p><p><pre><code><br>title: 小白部署HEXO到GitHub<br>date: 2018-06-10 02:38:31<br>description: 从傍晚到凌晨，HEXO和GitHub摸索中<br>categories: 生活随笔<br>tags: [hexo,GitHub]<br>toc: true<br>feature:<br></code></pre></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我从昨晚一直折腾到今天早晨，很累。<br>本文搭建的流程都靠记忆，因为之前没有接触过这些，我也不是编程工作者，所以很多都是通过baidu，google一点一点地查，遇到问题的时候，网上给出的答案也是很零散的。<br>我写的这个流程可能也有一些错误或者失误的地方，遇到问题只能自己摸索了。  </p><ol><li>关于命令以及配置文件.yml对格式的要求很严谨，例如:<br><pre><code><br>type: git<br></code></pre>  </li></ol><p>冒号：和后面的git之间都要有空格.  </p><ol start="2"><li>每次写完文章，都要有这三部曲：<br><pre><code><br>hexo c –删除public文件夹<br>hexo g –生成静态文件<br>hexo d -g –上传到GitHub仓库<br></code></pre>  </li><li>关于上面三个命令可参照主题作者的<a href="http://blackshow.me/2015/11/30/hexo-cheats/" target="_blank" rel="noopener">HEXO使用心得</a>这篇文章.<br>关于搭建和使用hexo，可以看看主题<a href="http://blackshow.me" target="_blank" rel="noopener">作者的博客</a>，他有几遍文章专门是介绍说明HEXO的使用的，很有帮助.  </li><li>还有一点，每次上传到GitHub之后，访问绑定的个人域名会出现404页面，之后重新到repository的Setting–&gt;GitHub Pages设置域名，才恢复正常。  </li><li>关于这个问题，到本地hexo目录下的source，添加一个名为CNAME的文件，文件内容是自己绑定的域名，例如sora.red,此方法可解决该问题。不会新建文件的可通过新建文本文档命名为CNAME，然后里面编辑内容，之后保存，最后删除掉该文档的后缀即可，即删除.txt。</li></ol><hr><p>本文到此结束。</p>]]></content>
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
